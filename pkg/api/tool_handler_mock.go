// Code generated by mockery v2.50.2. DO NOT EDIT.

//go:build !compile

package api

import (
	context "context"

	core "github.com/ksysoev/mcp-go-tools/pkg/core"
	mock "github.com/stretchr/testify/mock"
)

// MockToolHandler is an autogenerated mock type for the ToolHandler type
type MockToolHandler struct {
	mock.Mock
}

type MockToolHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockToolHandler) EXPECT() *MockToolHandler_Expecter {
	return &MockToolHandler_Expecter{mock: &_m.Mock}
}

// GetCodeStyle provides a mock function with given fields: ctx, categories
func (_m *MockToolHandler) GetCodeStyle(ctx context.Context, categories []string) ([]core.Rule, error) {
	ret := _m.Called(ctx, categories)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeStyle")
	}

	var r0 []core.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]core.Rule, error)); ok {
		return rf(ctx, categories)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []core.Rule); ok {
		r0 = rf(ctx, categories)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, categories)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockToolHandler_GetCodeStyle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeStyle'
type MockToolHandler_GetCodeStyle_Call struct {
	*mock.Call
}

// GetCodeStyle is a helper method to define mock.On call
//   - ctx context.Context
//   - categories []string
func (_e *MockToolHandler_Expecter) GetCodeStyle(ctx interface{}, categories interface{}) *MockToolHandler_GetCodeStyle_Call {
	return &MockToolHandler_GetCodeStyle_Call{Call: _e.mock.On("GetCodeStyle", ctx, categories)}
}

func (_c *MockToolHandler_GetCodeStyle_Call) Run(run func(ctx context.Context, categories []string)) *MockToolHandler_GetCodeStyle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockToolHandler_GetCodeStyle_Call) Return(_a0 []core.Rule, _a1 error) *MockToolHandler_GetCodeStyle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockToolHandler_GetCodeStyle_Call) RunAndReturn(run func(context.Context, []string) ([]core.Rule, error)) *MockToolHandler_GetCodeStyle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockToolHandler creates a new instance of MockToolHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockToolHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockToolHandler {
	mock := &MockToolHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
